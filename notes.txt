p2p networking

2 types (structured vs unstructured)

	- structured: peers organize into a specific structure that allows
	  each to oversee a specific portion of the network.
	- unstructured: no set structure. any peer can join the network by
	  duplicating the links already established. (much easier to implement).



File Sharing

(1) File Storage:
	- Chunk the file: When a peer (seeder) wants to share a file, it is divided into smaller,
	fixed-size chunks. This allows different parts of the file to be shared from different 
	sources simultaneously.
	- Metadata Creation: Seeder generates metadata for the file which includes:
		- File name, size, overall hash (?)
		- Number of chunks and the hash/checksum for each chunk
		- List of nodes (initial seeders) that have the file available
	- Announcing Availability: The peer advertises that is has the file (or chunks) by updating a shared directory, DHT, or through a central server that maintains a list of available files and the peers
	that hold them.

(2) File Retrieval
	- Peer Discovery & Metadata Exchange: A peer interested in downloading a file (leecher) first retrieves the 
	metadata from DHT. This metadata tells the requesting node which chunks are available and from which peers.
	- Requesting Chunks: The downloader sends requests for specific chunks to the peers that are known to have them. It's common to request different chunks from different peers to maximize speed and efficiency.
	- Integrity Checks: As each chunk arrives, the downloader verifies its integrity using checksums or hashes provided in the metadata.
	- Reassembly: Once chunks have been received and verified, the peer reassembles them into the original file. 

(3) File Sending
	- Listening for Requests: Peers that shared files listen for incoming connections and requests from other peers. When a request for a chunk arrives, the node locates that the chunk in its local storage.
	- Data Transfer: The requested chunk is sent directly to the requestor over the established connection.
	- Managing Multiple Requests: To optimize performance, a node can handle multiple simultaneous requests,
	sending different chunks to different peers at the same time.




File Chunking, Reassembly, Verfication

(1) File Chunking
	- The file is broken into fixed-size chunks (maybe about 1MB; not sure)
	- Each chunk is assigned a unique identifier, often based on a cryptographic hash (SHA-256?)
	- The hashes of all chunks are stored in a metadata file to verify integrity.

(2) Distributing the Chunks Across Peers
	- When a seeder has the full file, it announces its availability to the network.
	- Leechers download chunks from multiple sources. (Not sequentially; chunks are random)

(3) Reassembling the file
	- The metadata (like manifest file) includes a list of chunk hashes and their correct sequences 
	in the original file.
	- Each chunk is stored in a temporary buffer with its assigned index.
	- Once all chunks are downloaded, they are sorted based on their index and concatenated in order.

(4) Verifying Chunks for Integrity
	- After downloading a chunk, the leecher computes its hash and compares it to the hash provided in
	the metadata.
	- If the hashes matches, the chunk is valid.
	- If it does not match, the chunk is discarded and redownloaded.

(5) Redundancy and Availability
	- To improve availability, peers exchange information about which chunks they already have.
	- Peers priortize downloading rare chunks first to ensure all parts of the file remain available.





UI Stuff: This will be a cmd line application (implement with tview)

(1) Basic File Listing UI: list cmd to show all files the peer has locally.

===========================
   Available Files
===========================
 #   File Name               Size       Status   
------------------------------------------------
 1   ubuntu.iso              2.5 GB     Complete
 2   movie.mp4               700 MB     Seeding
 3   ebook.pdf               5 MB       Complete
------------------------------------------------
Total Files: 3
Type 'info <#>' for more details.


(2) File Details View: info <n> (View details of file n).

===========================
   File Details - ubuntu.iso
===========================
Size:            2.5 GB
Status:          Seeding
Downloaded:      100%
Total Chunks:    256
Chunks Available: [✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓] (All)
Upload Speed:    1.2 MB/s
Download Speed:  N/A
Peers Sharing:   12
------------------------------------------------
Commands: 
- 'peers <#>'  View who is sharing this file
- 'stop <#>'   Stop seeding


(3) Viewing Available Files Across the Network: search <filename>

===========================
   Search Results: "linux"
===========================
 #   File Name               Size       Peers   Status
------------------------------------------------
 1   linux.iso               2.5 GB     12      Available
 2   linux-tutorial.pdf      4 MB       3       Available
 3   linux-kernel.zip        40 MB      5       Available
------------------------------------------------
Type 'download <#>' to start downloading.


(4) Peer List for a File: peers n (Show who is sharing file n)

===========================
   Peers Sharing - ubuntu.iso
===========================
 #   Peer IP            Chunks  Speed    
------------------------------------------------
 1   192.168.1.10       90%     2.3 MB/s
 2   192.168.1.15       100%    1.5 MB/s
 3   192.168.1.20       75%     1.2 MB/s
 4   192.168.1.25       30%     500 KB/s
------------------------------------------------
Type 'download <#> from <peer IP>' to fetch from a specific peer.


(5) Download Progress UI: download n (start downloading file n)

===========================
   Downloading: ubuntu.iso
===========================
Progress:  [#####------]  45% (1.1 GB / 2.5 GB)
Speed:     2.5 MB/s
Peers:     5 sources
ETA:       15 min
------------------------------------------------
Commands: 
- 'pause'    Pause download
- 'cancel'   Cancel download


(6) Upload/Seeding Status: uploads (shows which files the peer is currently)

===========================
   Uploading / Seeding
===========================
 #   File Name             Speed   Peers  
------------------------------------------------
 1   ubuntu.iso            1.2 MB/s  5
 2   movie.mp4             900 KB/s  3
------------------------------------------------
Type 'stop <#>' to stop seeding a file.




Implementation Notes

	- Need a mechanism for sharing DHT (Distributed Hash Table) information to other nodes
	- Each node needs to periodically
		- check if other nodes have joined the network
		- send DHT info to new nodes on the network
	- DHT (How tf it works): Each peer has a keyspace in the Hash Table
		- Each key is a hash computed from the file metadata.
	
	File Sharing example: Peer 2 is seeking a file that Peer 1 and Peer 3 have.
		- When file appears in a Peer's directory, its metadata is generated and saved to a
		file that is shared with all other peers.
		- A hash is generated with the file metadata (hash is applied to a standardized version of the metadata) and stored in the DHT. (Hashing function is same across peers.)
		- When Peer 2 wants to download the file, it computes the hash for the file using metadata in the metadata file. The DHT is queried using this hash and returns the peers that have the file.
			- Each peer in the result has a corresponding bitfield that represents chunk availability.
		- Depending on availability, Peer 2 then requests chunks from relevant peers.
		- Peer 2 receives all chunks and reassembles the file. 
		- The file is then validated using a checksum. 

	- 2/22/2025: Metadata generation for files, write metadata to file, share will all peers
		- Metadata: File name, file size, chunk size, chunk indices
		- 
	- 2/23/2025: Figure out Metadata and DHT sharing